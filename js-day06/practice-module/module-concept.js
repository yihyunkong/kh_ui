// module: 여러 기능들에 관한 코드가 모여있는 하나의 파일 (함수가 모여있나?)

/* 
  유지보수 : 기능들이 모듈화가 잘 되어있다면, 의존성을 줄일 수 있기 때문에
            어떤 기능을 개선한다건, 수정할 때 훨씬 편하게 할 수 있다.
  네임스페이스화 : js에서 전역변수는 전역공간을 가진다.
                  코드의 양이 많아질수록 겹치는 네임스페이스가 많아질 수 있다.
                  모듈로 분리하면 모듈만의 네임스페이스를 갖기 때문에 효율적이다.
  재사용성 : 똑같은 코드를 반복하지 않고 모듈로 분리시켜서 필요할 때 마다 다시 사용 가능하다.
*/

/* 
  export: 코드를 외부에 내보내고 싶을 때 사용한다. 함수, 변수, 클래스 등을 
          export 예약어를 사용하여 내보낼 수도 있다.
*/


// 생활코딩 - JavaScript  모듈 
/* 
  부품.. 이라고 생각하자. 작고 단순한 것에서는 필요 없지만 크고 복잡한 것에서는 모듈이 필요하다.
  코드의 재활용성, 유지보수를 위해..

  어떤 프로그램을 구성하는 수많은 로직들을 재사용할 수 있는 단위로 나누어 구획화 >> 별도의 모듈
  그 모듈을 또 다른 프로그램에 부품으로 사용하는 기법.. (java의 메소드 같은건가?)

  코드를 여러개의 파일로 분리해서 사용하기 
  >> 자주 사용하는 파일을 별도의 파일로 만들어서 필요할 때마다 재활용 할 수 있다.
    함수보다 더 큰 개념 !
  >> 코드 수정 시 필요한 로직을 빠르게 찾을 수 있다. 
    관련된 모듈, 로직들만 찾을 수 있음
  >> 필요한 로직만 로드해서 메모리의 낭비를 줄일 수 있다. 
  >> 한 번 다운로드된 모듈은 웹브라우저에서 의해서 저장되기 때문에 동일한 로직을 다시 로드할 때 시간 절약할 수 있다.

  
*/