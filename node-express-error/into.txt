npm init -y >> package.json  파일 생성

const http = require('http') >> 이것을 기반으로 제공되는 웹 프레임워크가 express

npm i express --save
--save 옵션을 통해 설치된 node 모듈은 package.json 파일 내의 
depedencies 목록에 추가된다.

코드가 수정될 때 마다 다시 실행된다.
npm i --save -dev nodemon
 
package.json에 아래 내용 추가하고 실행할 땐 npm run server 엔터
    "script": {
        "server": "nodemon render.js"
    },

미들웨어 정의
express가 실행(node render or node render.js or nodemon render or nodemon render.js)되면서 
어떤 하나의 request가 들어왔을 때 (request를 통해 post방식 req.bodt json 정보 읽기가 가능, 사용자가 입력한 값을 요청 가능하다.)
그 request가 응답이 되어 나갈(화면 출력) 때 까지 거치는 모든 함수들을 말한다.
여러 함수들을 거치는 구조를 갖는다.
그 함수 하나하나가 미들웨어가 된다.

express F/W를 활용하면 서버사이드 렌더링과 클라이언트 사이드 렌더링이 가능하다.
Restful API - GET/POST 

** 동기와 비동기 처리에 대해 확인할 것 !
javascript - single thread >> 동기 처리이다. (callback) -> 하지만 비동기가 월등하다. (ex 버스타면서 노래듣기) 
nodejs - multi thread



웹 서비스에 대한 url 디자인 패턴 - 현재 세미 프로젝트!!
화면만 그리는 것에서 끝나느 것이 아니라 react버전으로 커스터마이징 해봐야한다...
응답이 완료된다? -> 오라클 서버 경유, naver 서버 경유, hackernews 서버 경유, youtube 서버 경유

요청하기 위해서 get이라는 메소드는 파라미터가 두개 >> get(param1, param2) 
각각 url 마다 함수의 갯수가 달라지는 것을 보자 !
http://localhost:3000
http://localhost:3000/tomato
http://localhost:3000/tomato/123
http://localhost:3000/login?mem_id=apple&mem_pw=123
url 정보를 가지고 요청하는건 모두 다 get 방식이다. - 단위테스트가 가능하다. 
ui 솔루션들은 defaultrk post 방식이다. - 단위테스트가 불가능하다. 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> get 방식으로 요청하기 ! 단위테스트 가능하지만 보안성은 떨어진다. 왜? 주소에 노출되니까
                                 각각 함수가 중복되면 안된다.
                                 get으로 먼저 개발하여 단위테스트를 거치고 post 방식으로 ! (js, postman 요청 퀘스트 가능. 화면이 없이도 테스트 가능하다. - 테스트 시나리오 >> 유스케이스 다이어그램 !!!!!)

<form id="" action="./login" method="get">
</form>

get 방식 - 1개 >> app.get("/url패턴", (req, res) => { 실행문 [if(선택), for(반복), switch(선택)] - callback 함수 (응답이 완료 되었을 때 처리된다.)})
post 방식 - 1개
select 
insert
update
delete

res.setContentType("text/html")
res.setContentType("application/json")
res.json(); // 이름도 더블 쿼테이션, 값 문자열, 숫자

데이터 타입
[] 배열 
{} 객체
[{}, {}, {}, ...] json

웹서비스를 위해서는 요청객체와 응답객체가 반드시 필요하다.
내가 인스턴스화 한다? 아니다. 시스템에서 제공해준다. - 의존성 주입 dependency injection 

express.js에서 주입해준다.
뭐를? 요청객체와 응답객체를
왜 쓴다고? 서버사이드 렌더링, 클라이언트 사이드 렌더링을 지원해준다. - fullstack

front-end >> fullstack 개발자를 목표로 !

